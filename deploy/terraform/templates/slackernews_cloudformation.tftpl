AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  InstanceType:
    Type: String
    Description: |
      Select an instance type for your initial cluster node
    AllowedValues:
      - t2.2xlarge
      - t2.xlarge
      - t3.2xlarge
      - t3.xlarge
      - t3a.2xlarge
      - t3a.xlarge
      - trn1.2xlarge
      - m5.2xlarge
      - m5.xlarge
      - m5a.2xlarge
      - m5a.xlarge
      - m5ad.2xlarge
      - m5ad.xlarge
      - m5d.2xlarge
      - m5d.xlarge
      - m5dn.2xlarge
      - m5dn.xlarge
      - m5n.2xlarge
      - m5n.xlarge
      - m5zn.2xlarge
      - m5zn.xlarge
      - m6a.2xlarge
      - m6a.xlarge
      - m6i.2xlarge
      - m6i.xlarge
      - m6id.2xlarge
      - m6id.xlarge
      - m6idn.2xlarge
      - m6idn.xlarge
      - m6in.2xlarge
      - m6in.xlarge
      - m7a.2xlarge
      - m7a.xlarge
      - m7i-flex.2xlarge
      - m7i-flex.xlarge
      - m7i.2xlarge
      - m7i.xlarge

  DiskSize:
    Type: Number
    Description: |
      Size for the boot disk

  SubscriptionType:
    Type: String
    Description: |
      Is this a paid or trial subscription?
    AllowedValues:
      - "Paid"
      - "Trial"

  BetaProgram:
    Type: String
    Description: |
      You can choose to be part of the Slackernews Beta program and receive early access to
      new releases and features. 
    AllowedValues:
      - "Yes"
      - "No"

  Email:
    Type: String
    Description: |
      Email to use for you description. This will be your login for accessing the Slackernews
      Helm chart and will not be used for any other purposes.

  PublicKey:
    Type: String
    Description: |
      Public key to enable connecting to the initial node of the cluster via SSH

Mappings:
  LicenseType:
    Paid:
      Type: prod
    Trial:
      Type: trial
  Ami:
    cn-northwest-1:
      AmiId: ami-07e6c9034a08c1dbf
    cn-north-1:
      AmiId: ami-0b7b34ceb17dcc9fc
    me-central-1:
      AmiId: ami-0c139b9dae09be9e2
    eu-central-1:
      AmiId: ami-04b4614474c70b684
    us-west-1:
      AmiId: ami-0c38318f8f25527a5
    ap-south-1:
      AmiId: ami-0f90ab0fec3fc43f3
    eu-north-1:
      AmiId: ami-0459e5983f05e6617
    il-central-1:
      AmiId: ami-0a3e30ed291e0d7ea
    eu-south-1:
      AmiId: ami-0e7a221fdd9e64dac
    af-south-1:
      AmiId: ami-0decfbd5a093c684c
    ap-northeast-1:
      AmiId: ami-099736a66378f9001
    ca-west-1:
      AmiId: ami-0432f4e0c147c0802
    ca-central-1:
      AmiId: ami-0c793c682dfb697a2
    ap-east-1:
      AmiId: ami-05d0f4f91a366f1c7
    me-south-1:
      AmiId: ami-0329a770f5f6d59a3
    eu-west-1:
      AmiId: ami-0652a081025ec9fee
    sa-east-1:
      AmiId: ami-0f3364e7ea49de92c
    us-east-1:
      AmiId: ami-0cf1810907a781f00
    ap-southeast-1:
      AmiId: ami-02da9706e7051f070
    us-west-2:
      AmiId: ami-0982d319985cb387e
    ap-south-2:
      AmiId: ami-004cebaa37d90ee8f
    eu-central-2:
      AmiId: ami-07b29705c75330df0
    eu-west-2:
      AmiId: ami-08e4526a271956ce2
    eu-south-2:
      AmiId: ami-0176060ac25de3bda
    ap-northeast-2:
      AmiId: ami-07a34fe09b79cabe9
    us-east-2:
      AmiId: ami-0265ca2039df27f61
    ap-southeast-2:
      AmiId: ami-0c753d8771a18f619
    eu-west-3:
      AmiId: ami-0d64d778de0fdce8d
    ap-northeast-3:
      AmiId: ami-0dc058c69dc03aab0
    ap-southeast-3:
      AmiId: ami-0a5b89748767645f4
    ap-southeast-4:
      AmiId: ami-08ebbe38fdf98b63a
 
Conditions:
  IsBeta: !Equals [ BetaProgram, "Yes" ]

Resources:
  CreateLicense:
    Type: Custom::LambdaTrigger
    Properties:
      ServiceToken: ${license_topic_arn}
      Name: !Ref AWS::StackId 
      ExternalId: !Ref AWS::AccountId
      Email: !Ref Email
      AppId: ${app_id}
      Channel: !If [ IsBeta, Beta, Stable ]
      Type: !FindInMap [ LicenseType, !Ref SubscriptionType, Type ]

  AdminConsolePassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Simple secret created by AWS CloudFormation.
      GenerateSecretString:
        GenerateStringKey: password
        SecretStringTemplate: '{"password": ""}'
        PasswordLength: 20

  InitialNode:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: 'PT15M'
    Properties:
      ImageId: !FindInMap [ Ami, !Ref AWS::Region, AmiId ]
      InstanceType: !Ref InstanceType   
      SubnetId: !Ref ClusterSubnet
      SecurityGroupIds:
        - Fn::GetAtt:
          - ClusterSecurityGroup
          - GroupId
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1" 
          Ebs:
            VolumeSize: !Ref DiskSize 
            VolumeType: gp3 
            DeleteOnTermination: true 
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              ${user_data}
            - InstallerUri: !GetAtt CreateLicense.InstallerUri
              DownloadToken: !GetAtt CreateLicense.DownloadToken
              PublicKey: !Ref PublicKey
              AdminConsolePassword:
                Fn::Sub: "{{resolve:secretsmanager:$${AdminConsolePassword}::password}}"
              StackName: !Ref AWS::StackName 
              ResourceName: InitialNode 
              Region: !Ref AWS::Region

  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  ClusterSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.20.1.0/24
      MapPublicIpOnLaunch: true

  ClusterInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref ClusterInternetGateway

  ClusterRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC

  ClusterRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ClusterInternetGateway

  ClusterSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnet
      RouteTableId: !Ref ClusterRouteTable

  ClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access via SSH and the Admin Console
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        # SSH
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 
        # Admin console
        - IpProtocol: tcp
          FromPort: '30000'
          ToPort: '30000'
          CidrIp: 0.0.0.0/0
        # HTTPS for ingress/application traffic
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'

Outputs:
  InstallUri:
    Description: URI for the embedded clustser download
    Value: !GetAtt CreateLicense.InstallerUri
  DownloadToken:
    Description: Authorization token for installer download
    Value: !GetAtt CreateLicense.DownloadToken
  LicenseUri:
    Description: URI of the Replicated license file
    Value: !GetAtt CreateLicense.LicenseFileUri
  NodePublicHostname:
    Description: Public hostname for the initial cloud instance
    Value: !GetAtt InitialNode.PublicDnsName
  ConsoleUri:
    Description: URI to access the admin console of the new cluster
    Value: !Sub http://$${InitialNode.PublicIp}:30000
  AdminConsolePassword:
    Description: URI to access the admin console of the new cluster
    Value: 
      Fn::Sub: "{{resolve:secretsmanager:$${AdminConsolePassword}::password}}"
